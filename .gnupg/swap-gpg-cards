#!/bin/bash
# Wipes the local cache of keygrips stored on SmartCards and similar tokens.
#
# This is useful if you've got the same keys stored on several SmartCards. At the time of writing this script, GnuPG expects that a key can only exist on one card. If you unplug that and insert another card with the same key, GnuPG will refuse to use it, and will ask you to insert the first card it saw.
#
# By deleting the stored information about where to find the keys, we can force GnuPG to search for the key on the card currently inserted, regardless of whether the key happens to exist on another card as well.
#
# Usage:
# swap-keys [key-id]
#
# If no key-id is specified, we'll work on all available secret keys.
# 
# Other people's struggle:
# * https://dev.gnupg.org/T1798 (looks like an upstream solution is on its way)
# * https://security.stackexchange.com/questions/154702/gpg-encryption-subkey-on-multiple-smart-cards-issue
# * https://security.stackexchange.com/questions/165286/how-to-use-multiple-smart-cards-with-gnupg
# 
# Information about the --with-colons format:
# https://github.com/gpg/gnupg/blob/master/doc/DETAILS

set -u
set -e

# Updates the GnuPG's cache of card information. Fails if no card is connected
gpg --card-status >/dev/null

# Creates an array of keygrips
mapfile -t keygrips < <(
	# gpg gives us machine parsable, colon separated information about all keys matching the parameter(s) given to this script. This is passed on to awk for further processing
	gpg --keyid-format 0xlong --batch --with-colons  --list-secret-keys "${@}" \
	|awk -F: '
	BEGIN {
		# The token field is listed as "#" when the keygrip is not on a token. We use that as a startup value
		token="#"
	}
	{
		# We found a secret subkey
		if($1=="ssb") {
				# We store the token id to be checked when we proceed to the keygrips
				token=$15
			next
		}
		# We found a keygrip. We check if this is on a token. If it is, we print the keygrip ID
		else if($1=="grp" && token!="#") {
			print $10
		}
	}
	'
)

GNUPGHOME="${GNUPGHOME:-"$HOME/.gnupg"}"

# Adds filesystem info to the keygrips so they can be used as parameters for rm
for i in "${!keygrips[@]}"; do
	keygrips[$i]="$GNUPGHOME/private-keys-v1.d/${keygrips[$i]}.key"
done

# Finally, deletes the keygrip files, if any exist
if [ ${#keygrips[@]} -gt 0 ]; then
	cd 
	rm -vif "${keygrips[@]}"
fi

# Updates the GnuPG's cache of card information again
gpg --card-status >/dev/null
